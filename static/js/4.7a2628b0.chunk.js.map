{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/DialogsItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","DialogItem","props","path","id","className","style","dialog","to","activeClassName","activeLink","name","Message","message","maxLength30","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","Dialogs","dialogsElements","dialogsPage","dialogs","map","messagesElements","messages","dialogsContent","dialogsItems","value","addMessage","newMessageBody","compose","connect","dispatch","AddMessageActionCreator","Component","RedirectComponent","this","React"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,eAAiB,gCAAgC,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,WAAa,4BAA4B,SAAW,0BAA0B,QAAU,2B,iICGzSC,EAA6B,SAACC,GAAD,MAAY,CAC3CC,OAAQD,EAAME,KAAKD,S,qECUNE,EAZI,SAACC,GAClB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACE,qBAAKC,UAAWC,IAAMC,OAAtB,SACE,cAAC,IAAD,CAASC,GAAIL,EAAMM,gBAAiBH,IAAMI,WAA1C,SACGR,EAAMS,UCHAC,EAJC,SAACV,GACf,OAAO,qBAAKG,UAAWC,IAAMO,QAAtB,SAAgCX,EAAMW,WCqCzCC,EAAcC,YAAiB,IAoB/BC,EAAsBC,YAAU,CAAEC,KAAM,yBAAlBD,EAlBL,SAACf,GACtB,OACE,uBAAMiB,SAAUjB,EAAMkB,aAAtB,UACE,8BACE,cAACC,EAAA,EAAD,CACAV,KAAM,iBACNW,YAAY,6BACZC,UAAWC,IACXC,SAAU,CAACC,IAAUZ,OAGvB,8BACE,kDAQOa,EArDC,SAACzB,GACf,IAAI0B,EAAkB1B,EAAM2B,YAAYC,QAAQC,KAAI,SAACxB,GAAD,OAClD,cAAC,EAAD,CAAYI,KAAMJ,EAAOI,KAAsBP,GAAIG,EAAOH,IAAtBG,EAAOH,OAGzC4B,EAAmB9B,EAAM2B,YAAYI,SAASF,KAAI,SAAClB,GAAD,OACpD,cAAC,EAAD,CAASA,QAASA,EAAQA,SAAcA,EAAQT,OAOlD,OAAKF,EAAMH,OAGT,sBAAKM,UAAWC,IAAMwB,QAAtB,UACE,yCACA,sBAAKzB,UAAWC,IAAM4B,eAAtB,UACE,qBAAK7B,UAAWC,IAAM6B,aAAtB,SAAqCP,IACrC,sBAAKvB,UAAWC,IAAM2B,SAAtB,UACGD,EACD,cAAChB,EAAD,CACEG,SAdU,SAACiB,GACnBlC,EAAMmC,WAAWD,EAAME,4BAGC,cAAC,IAAD,CAAU9B,GAAG,YCM1B+B,sBAAQC,aAtBC,SAAC1C,GACvB,MAAO,CACL+B,YAAa/B,EAAM+B,gBAGI,SAACY,GAC1B,MAAO,CACLJ,WAAY,SAACC,GACXG,EAASC,YAAwBJ,UJNP,SAACK,GAAe,IACxCC,EADuC,4JAE3C,WACE,OAAKC,KAAK3C,MAAMH,OAET,cAAC4C,EAAD,eAAeE,KAAK3C,QAFI,cAAC,IAAD,CAAUM,GAAG,eAHH,GACbsC,IAAMH,WAWtC,OAHsCH,YAAQ3C,EAAR2C,CAAqCI,KIW9DL,CAAwEZ","file":"static/js/4.7a2628b0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1KJsj\",\"dialogsContent\":\"Dialogs_dialogsContent__23Ao5\",\"dialogsItems\":\"Dialogs_dialogsItems__tqyTr\",\"active\":\"Dialogs_active__Kjiot\",\"dialog\":\"Dialogs_dialog__2MaQb\",\"activeLink\":\"Dialogs_activeLink__2_Dtq\",\"messages\":\"Dialogs_messages__3__3j\",\"message\":\"Dialogs_message__3bJ2W\"};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Redirect to=\"/login\" />;\r\n\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n\r\n   let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent);\r\n\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n","import { NavLink } from \"react-router-dom\";\r\nimport style from \"../Dialogs.module.css\";\r\n\r\nconst DialogItem = (props) => {\r\n  let path = \"/dialogs/\" + props.id;\r\n\r\n  return (\r\n    <div className={style.dialog}>\r\n      <NavLink to={path} activeClassName={style.activeLink}>\r\n        {props.name}\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import style from \"./../Dialogs.module.css\";\r\n\r\nconst Message = (props) => {\r\n  return <div className={style.message}>{props.message}</div>;\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { maxLengthCreator, required } from \"../../utils/validators/validators\";\r\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\r\nimport style from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogsItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\n\r\nconst Dialogs = (props) => {\r\n  let dialogsElements = props.dialogsPage.dialogs.map((dialog) => (\r\n    <DialogItem name={dialog.name} key={dialog.id} id={dialog.id} />\r\n  ));\r\n\r\n  let messagesElements = props.dialogsPage.messages.map((message) => (\r\n    <Message message={message.message} key={message.id} />\r\n  ));\r\n\r\n  let addNewMessage = (value) => {\r\n    props.addMessage(value.newMessageBody);\r\n  }\r\n\r\n  if (!props.isAuth) return <Redirect to=\"/login\" />;\r\n\r\n  return (\r\n    <div className={style.dialogs}>\r\n      <h2>DIALOGS</h2>\r\n      <div className={style.dialogsContent}>\r\n        <div className={style.dialogsItems}>{dialogsElements}</div>\r\n        <div className={style.messages}>\r\n          {messagesElements}\r\n          <AddMessageFormRedux\r\n            onSubmit={addNewMessage}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\n\r\nconst AddMessageForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field \r\n        name={\"newMessageBody\"} \r\n        placeholder=\"Enter your message here...\" \r\n        component={Textarea} \r\n        validate={[required, maxLength30]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Send</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddMessageFormRedux = reduxForm({ form: \"dialogsAddMessageForm\" })(AddMessageForm);\r\n\r\nexport default Dialogs;\r\n","import { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { AddMessageActionCreator } from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addMessage: (newMessageBody) => {\r\n      dispatch(AddMessageActionCreator(newMessageBody));\r\n    },\r\n  };\r\n};\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n\r\n// (props) => {\r\n//   if (!this.props.isAuth) return <Redirect to=\"/login\" />;\r\n//   return <Dialogs {...props} />\r\n// }\r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs);\r\n"],"sourceRoot":""}